#include <WiFiClient.h>
#include <WiFiServer.h>
#include <WiFiUdp.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "LightSensor"
  https://create.arduino.cc/cloud/things/49793c8d-3bce-4710-8e03-61f8f422eca8 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  - No variables have been created, add cloud variables on the Thing Setup page
    to see them declared here

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

WiFiClient client;

const int sensorPin = 19;
//const int threshold = 2500; // Threshold value for detecting sunlight


char   HOST_NAME[] = "maker.ifttt.com";
String eventStart = "/trigger/Sunlight_Detected/with/key/bbzSGC4Rxw1GONSnyvqxJ9"; 
String eventStop = "/trigger/Sunlight_Blocked/with/key/bbzSGC4Rxw1GONSnyvqxJ9";
String queryString = "?value1=57&value2=25";

bool currentSensorValue = HIGH;
bool previousSensorValue = HIGH;

void setup() {
  Serial.begin(9600);
  pinMode(sensorPin, INPUT);

  while (!Serial);

  // connect to web server on port 80:
  if (client.connect(HOST_NAME, 80)) {
    // if connected:
    Serial.println("Connected to server");
  }
  else {// if not connected:
    Serial.println("connection failed");
  }

  delay(1500); 

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  //setDebugMessageLevel(2);
  //ArduinoCloud.printDebugInfo();
}





void loop() {
  ArduinoCloud.update();

  currentSensorValue = digitalRead(sensorPin);
  Serial.print("Sensor Value: ");
  Serial.println(currentSensorValue);

  if (currentSensorValue != previousSensorValue) {
    if (currentSensorValue == HIGH) {
      Serial.println("Sunlight Blocked");
      sendIFTTTNotification(eventStop);
      previousSensorValue = currentSensorValue;
    }
    if (currentSensorValue == LOW) {
      Serial.println("Sunlight Detected");
      sendIFTTTNotification(eventStart);
      previousSensorValue = currentSensorValue;
    }
    
  }

  delay(1000);
}

void sendIFTTTNotification(String event) {
  if (client.connect(HOST_NAME, 80)) {
    String PATH_NAME = event;
    client.println("GET " + PATH_NAME + queryString + " HTTP/1.1");
    client.println("Host: " + String(HOST_NAME));
    client.println("Connection: close");
    client.println();

    while (client.connected()) {
      if (client.available()) {
        // read an incoming byte from the server and print it to serial monitor:
        char c = client.read();
        Serial.print(c);
      }
    }
    // the server's disconnected, stop the client:
    client.stop();
    Serial.println();
    Serial.println("disconnected");
  }
}


